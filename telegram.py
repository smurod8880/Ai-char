import telegram
from telegram import Update, Bot
from telegram.ext import Application, CommandHandler, ContextTypes
import asyncio
import logging
from globals import TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, BOT_ACTIVE
from database import init_db, get_daily_statistics

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN)
application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è chat_id
current_chat_id = TELEGRAM_CHAT_ID

async def send_telegram_message(message: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram."""
    global current_chat_id
    
    if not current_chat_id:
        logger.error("Chat ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return
        
    try:
        await bot.send_message(
            chat_id=current_chat_id, 
            text=message, 
            parse_mode='Markdown'
        )
        logger.debug("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    global current_chat_id
    
    user_id = update.effective_chat.id
    username = update.effective_user.username or update.effective_user.first_name
    current_chat_id = str(user_id)
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    
    welcome_message = f"""
üéØ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Binary Options Bot!**

–ü—Ä–∏–≤–µ—Ç, {username}! 

–Ø —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±–∏–Ω–∞—Ä–Ω—ã—Ö –æ–ø—Ü–∏–æ–Ω–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ **QuantumBinaryPrecisionV3**.

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/start` - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
‚Ä¢ `/run_analysis` - –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
‚Ä¢ `/stop_analysis` - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑
‚Ä¢ `/stats` - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å
‚Ä¢ `/help` - –ü–æ–º–æ—â—å

**–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**
‚úÖ –ê–Ω–∞–ª–∏–∑ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
‚úÖ –ò–ò-–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é 85%+
‚úÖ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏
‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏
‚úÖ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/run_analysis`
    """
    
    await update.message.reply_text(welcome_message, parse_mode='Markdown')

async def run_analysis_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞."""
    global BOT_ACTIVE
    
    if BOT_ACTIVE:
        await update.message.reply_text("‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑ —É–∂–µ –∑–∞–ø—É—â–µ–Ω!")
        return
    
    BOT_ACTIVE = True
    
    start_message = """
üöÄ **–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –±–∏–Ω–∞—Ä–Ω—ã—Ö –æ–ø—Ü–∏–æ–Ω–æ–≤**

‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Binance WebSocket
‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ò–ò-–º–æ–¥–µ–ª–∏
‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
‚úÖ –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ QuantumBinaryPrecisionV3

**–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–µ –ø–∞—Ä—ã:**
‚Ä¢ BTC/USD, ETH/USD, BNB/USD
‚Ä¢ XRP/USD, SOL/USD, ADA/USD, DOGE/USD

**–¢–∞–π–º—Ñ—Ä–µ–π–º—ã:** 1m, 5m, 15m, 30m, 1h

üéØ –û–∂–∏–¥–∞–π—Ç–µ —Å–∏–≥–Ω–∞–ª—ã —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é 85%+
‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    """
    
    await update.message.reply_text(start_message, parse_mode='Markdown')
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
    from core import main_loop
    asyncio.create_task(main_loop())

async def stop_analysis_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–Ω–∞–ª–∏–∑."""
    global BOT_ACTIVE
    
    if not BOT_ACTIVE:
        await update.message.reply_text("‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    BOT_ACTIVE = False
    
    stop_message = """
üõë **–ê–Ω–∞–ª–∏–∑ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω**

–í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.
–î–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/run_analysis`
    """
    
    await update.message.reply_text(stop_message, parse_mode='Markdown')

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –¥–µ–Ω—å."""
    try:
        total_signals, wins = get_daily_statistics()
        win_rate = (wins / total_signals * 100) if total_signals > 0 else 0
        
        stats_message = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è**

üéØ **–í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤:** {total_signals}
‚úÖ **–£—Å–ø–µ—à–Ω—ã—Ö:** {wins}
üìà **–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥:** {win_rate:.1f}%
üé≤ **–°—Ç–∞—Ç—É—Å:** {'–ê–∫—Ç–∏–≤–µ–Ω' if BOT_ACTIVE else '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}

**–¶–µ–ª–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**
‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å: 85%+
‚Ä¢ –°–∏–≥–Ω–∞–ª–æ–≤ –≤ –¥–µ–Ω—å: 30-50
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º —Å–∏–≥–Ω–∞–ª–æ–≤: 50/–¥–µ–Ω—å
        """
        
        await update.message.reply_text(stats_message, parse_mode='Markdown')
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É."""
    help_message = """
üÜò **–°–ø—Ä–∞–≤–∫–∞ –ø–æ Binary Options Bot**

**–ö–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/start` - –ó–∞–ø—É—Å–∫ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
‚Ä¢ `/run_analysis` - –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
‚Ä¢ `/stop_analysis` - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑
‚Ä¢ `/stats` - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å
‚Ä¢ `/help` - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

**–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**
1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π `/start`
2. –ù–∞—á–Ω–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –∫–æ–º–∞–Ω–¥–æ–π `/run_analysis`
3. –ü–æ–ª—É—á–∞–π—Ç–µ —Å–∏–≥–Ω–∞–ª—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
4. –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–º–∞–Ω–¥–æ–π `/stats`

**–§–æ—Ä–º–∞—Ç —Å–∏–≥–Ω–∞–ª–æ–≤:**
‚Ä¢ –ü–∞—Ä–∞ –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º
‚Ä¢ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (CALL/PUT)
‚Ä¢ –í—Ä–µ–º—è —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏
‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
‚Ä¢ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞ –∏ –≤—Ä–µ–º—è

**–ü–æ–¥–¥–µ—Ä–∂–∫–∞:** –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7 –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä—ã–Ω–æ–∫ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥.
    """
    
    await update.message.reply_text(help_message, parse_mode='Markdown')

def setup_telegram_handlers():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥."""
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("run_analysis", run_analysis_command))
    application.add_handler(CommandHandler("stop_analysis", stop_analysis_command))
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(CommandHandler("help", help_command))

async def start_telegram_bot():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram –±–æ—Ç–∞."""
    setup_telegram_handlers()
    logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    
    await application.initialize()
    await application.start()
    await application.updater.start_polling()
    
    logger.info("Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

async def stop_telegram_bot():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Telegram –±–æ—Ç–∞."""
    logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –±–æ—Ç–∞...")
    await application.updater.stop()
    await application.stop()
    await application.shutdown()
    logger.info("Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
  
