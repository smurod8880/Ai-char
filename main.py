import uvicorn
from fastapi import FastAPI, HTTPException
from fastapi.responses import JSONResponse
import asyncio
import logging
from datetime import datetime
import os
from globals import TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, PAIRS, TIME_FRAMES
from core import main_loop, get_system_status
from telegram import start_telegram_bot, stop_telegram_bot, send_telegram_message
from database import init_db, get_daily_statistics
from bot_control import (
    start_bot_analysis, stop_bot_analysis, restart_bot_analysis,
    get_bot_status, get_bot_statistics
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('binary_options_bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="Binary Options Bot - Quantum Precision V3",
    description="–í—ã—Å–æ–∫–æ—Ç–æ—á–Ω—ã–π –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±–∏–Ω–∞—Ä–Ω—ã—Ö –æ–ø—Ü–∏–æ–Ω–æ–≤ —Å –ò–ò-–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏",
    version="3.0.0",
    docs_url="/docs",
    redoc_url="/redoc"
)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
app_start_time = None
telegram_bot_task = None

@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    global app_start_time, telegram_bot_task
    
    app_start_time = datetime.now()
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Binary Options Bot - Quantum Precision V3")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        init_db()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞
        telegram_bot_task = asyncio.create_task(start_telegram_bot())
        logger.info("‚úÖ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ
        if TELEGRAM_CHAT_ID and TELEGRAM_CHAT_ID != "":
            startup_message = f"""
üöÄ **Binary Options Bot –∑–∞–ø—É—â–µ–Ω!**

**–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞:** {app_start_time.strftime('%Y-%m-%d %H:%M:%S')} UTC

**–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:**
‚Ä¢ –ü–∞—Ä—ã: {len(PAIRS)} ({', '.join([p.replace('USDT', '') for p in PAIRS[:3]])}...)
‚Ä¢ –¢–∞–π–º—Ñ—Ä–µ–π–º—ã: {len(TIME_FRAMES)} ({', '.join(TIME_FRAMES)})
‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: 5 —Å–µ–∫—É–Ω–¥
‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: 85%

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/run_analysis` - –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
‚Ä¢ `/stop_analysis` - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
‚Ä¢ `/stats` - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ `/help` - –°–ø—Ä–∞–≤–∫–∞

–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! üéØ
            """
            await send_telegram_message(startup_message)
        
        logger.info("üéØ Binary Options Bot –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        raise

@app.on_event("shutdown")
async def shutdown_event():
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    global telegram_bot_task
    
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Binary Options Bot...")
    
    try:
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
        await stop_bot_analysis()
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –±–æ—Ç–∞
        if telegram_bot_task:
            telegram_bot_task.cancel()
            try:
                await telegram_bot_task
            except asyncio.CancelledError:
                pass
        
        await stop_telegram_bot()
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
        if TELEGRAM_CHAT_ID and TELEGRAM_CHAT_ID != "":
            shutdown_message = "üõë Binary Options Bot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            await send_telegram_message(shutdown_message)
        
        logger.info("‚úÖ Binary Options Bot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")

# API Endpoints

@app.get("/")
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ API."""
    uptime = datetime.now() - app_start_time if app_start_time else None
    
    return {
        "message": "Binary Options Bot - Quantum Precision V3",
        "status": "running",
        "version": "3.0.0",
        "uptime_seconds": uptime.total_seconds() if uptime else 0,
        "start_time": app_start_time.isoformat() if app_start_time else None,
        "endpoints": {
            "status": "/status",
            "statistics": "/statistics",
            "start": "/start",
            "stop": "/stop",
            "restart": "/restart"
        }
    }

@app.get("/status")
async def get_status():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞."""
    try:
        bot_status = get_bot_status()
        system_status = get_system_status()
        
        return {
            "bot_active": bot_status["bot_active"],
            "initialized": bot_status["initialized"],
            "websocket_running": bot_status["websocket_running"],
            "uptime_seconds": bot_status["uptime"],
            "pairs_count": len(PAIRS),
            "timeframes_count": len(TIME_FRAMES),
            "system_status": system_status,
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/statistics")
async def get_statistics():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞."""
    try:
        bot_stats = await get_bot_statistics()
        total_signals, wins = get_daily_statistics()
        
        return {
            "daily_signals": total_signals,
            "successful_signals": wins,
            "win_rate": bot_stats["win_rate"],
            "target_win_rate": 85.0,
            "performance_rating": bot_stats["performance"],
            "pairs_analyzed": len(PAIRS),
            "timeframes_analyzed": len(TIME_FRAMES),
            "total_combinations": len(PAIRS) * len(TIME_FRAMES),
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/start")
async def start_analysis():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –±–æ—Ç–∞."""
    try:
        result = await start_bot_analysis()
        return JSONResponse(content=result)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/stop")
async def stop_analysis():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –±–æ—Ç–∞."""
    try:
        result = await stop_bot_analysis()
        return JSONResponse(content=result)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/restart")
async def restart_analysis():
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –±–æ—Ç–∞."""
    try:
        result = await restart_bot_analysis()
        return JSONResponse(content=result)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã."""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        db_ok = True
        try:
            get_daily_statistics()
        except:
            db_ok = False
        
        telegram_ok = TELEGRAM_BOT_TOKEN != "YOUR_TELEGRAM_BOT_TOKEN"
        
        system_status = get_system_status()
        
        overall_health = "healthy" if (db_ok and telegram_ok) else "unhealthy"
        
        return {
            "status": overall_health,
            "components": {
                "database": "ok" if db_ok else "error",
                "telegram": "ok" if telegram_ok else "not_configured",
                "websocket": "ok" if system_status["websocket_running"] else "disconnected",
                "bot_engine": "ok" if system_status["bot_active"] else "stopped"
            },
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
        return {
            "status": "error",
            "error": str(e),
            "timestamp": datetime.now().isoformat()
        }

if __name__ == "__main__":
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞
    host = os.getenv("HOST", "0.0.0.0")
    port = int(os.getenv("PORT", 8000))
    
    logger.info(f"–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ {host}:{port}")
    
    # –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    if os.getenv("ENVIRONMENT") == "development":
        uvicorn.run(
            "main:app",
            host=host,
            port=port,
            reload=True,
            log_level="info"
        )
    else:
        # –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
        uvicorn.run(
            app,
            host=host,
            port=port,
            log_level="info"
        )
      
