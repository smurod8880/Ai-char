import asyncio
import logging
import time
from globals import PAIRS, TIME_FRAMES, UPDATE_INTERVAL, BOT_ACTIVE
from websocket import connect_binance_websocket, initialize_websocket_data_queues
from signal_analyzer import analyze_pair_and_timeframe
from database import init_db

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class BinaryOptionsCoreEngine:
    """–û—Å–Ω–æ–≤–Ω–æ–π –¥–≤–∏–∂–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±–∏–Ω–∞—Ä–Ω—ã—Ö –æ–ø—Ü–∏–æ–Ω–æ–≤."""
    
    def __init__(self):
        self.ws_task = None
        self.analysis_tasks = []
        self.is_initialized = False
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã."""
        if self.is_initialized:
            return
        
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Binary Options Core Engine...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
        init_db()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—á–µ—Ä–µ–¥–µ–π –¥–∞–Ω–Ω—ã—Ö
        await initialize_websocket_data_queues()
        
        # –ó–∞–ø—É—Å–∫ WebSocket –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        if not self.ws_task:
            self.ws_task = asyncio.create_task(connect_binance_websocket())
            logger.info("WebSocket –∑–∞–¥–∞—á–∞ –∑–∞–ø—É—â–µ–Ω–∞")
        
        # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        await asyncio.sleep(10)
        
        self.is_initialized = True
        logger.info("Core Engine –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def cleanup(self):
        """–û—á–∏—â–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ."""
        if self.ws_task and not self.ws_task.done():
            self.ws_task.cancel()
            try:
                await self.ws_task
            except asyncio.CancelledError:
                pass
        
        for task in self.analysis_tasks:
            if not task.done():
                task.cancel()
        
        logger.info("Core Engine –æ—á–∏—â–µ–Ω")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–≤–∏–∂–∫–∞
core_engine = BinaryOptionsCoreEngine()

async def main_loop():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –±–∏–Ω–∞—Ä–Ω—ã—Ö –æ–ø—Ü–∏–æ–Ω–æ–≤."""
    global BOT_ACTIVE
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∞–Ω–∞–ª–∏–∑–∞ –±–∏–Ω–∞—Ä–Ω—ã—Ö –æ–ø—Ü–∏–æ–Ω–æ–≤")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
    await core_engine.initialize()
    
    cycle_count = 0
    total_signals_sent = 0
    
    try:
        while BOT_ACTIVE:
            cycle_start_time = time.time()
            cycle_count += 1
            
            logger.info(f"–¶–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞ #{cycle_count} - –ê–Ω–∞–ª–∏–∑ {len(PAIRS)} –ø–∞—Ä –Ω–∞ {len(TIME_FRAMES)} —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö")
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            analysis_tasks = []
            for pair in PAIRS:
                for timeframe in TIME_FRAMES:
                    task = asyncio.create_task(
                        analyze_pair_and_timeframe(pair, timeframe)
                    )
                    analysis_tasks.append(task)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            if analysis_tasks:
                try:
                    results = await asyncio.gather(*analysis_tasks, return_exceptions=True)
                    
                    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    successful_analyses = sum(1 for r in results if not isinstance(r, Exception))
                    errors = sum(1 for r in results if isinstance(r, Exception))
                    
                    if errors > 0:
                        logger.warning(f"–û—à–∏–±–æ–∫ –≤ –∞–Ω–∞–ª–∏–∑–µ: {errors}/{len(analysis_tasks)}")
                    
                except Exception as e:
                    logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ü–∏–∫–ª–∞
            cycle_time = time.time() - cycle_start_time
            sleep_time = max(0, UPDATE_INTERVAL - cycle_time)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ü–∏–∫–ª–∞
            if cycle_count % 10 == 0:  # –ö–∞–∂–¥—ã–µ 10 —Ü–∏–∫–ª–æ–≤
                logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –¶–∏–∫–ª #{cycle_count}, –í—Ä–µ–º—è: {cycle_time:.2f}—Å, –°–ª–µ–¥—É—é—â–∏–π —á–µ—Ä–µ–∑: {sleep_time:.2f}—Å")
            
            # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
            if sleep_time > 0:
                await asyncio.sleep(sleep_time)
    
    except asyncio.CancelledError:
        logger.info("–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main_loop: {e}")
    finally:
        await core_engine.cleanup()
        logger.info("–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")

async def emergency_stop():
    """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤."""
    global BOT_ACTIVE
    BOT_ACTIVE = False
    await core_engine.cleanup()
    logger.warning("–í—ã–ø–æ–ª–Ω–µ–Ω–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
async def start_analysis():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –∏–∑–≤–Ω–µ."""
    global BOT_ACTIVE
    if not BOT_ACTIVE:
        BOT_ACTIVE = True
        asyncio.create_task(main_loop())
        return "–ê–Ω–∞–ª–∏–∑ –∑–∞–ø—É—â–µ–Ω"
    return "–ê–Ω–∞–ª–∏–∑ —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω"

async def stop_analysis():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –∏–∑–≤–Ω–µ."""
    global BOT_ACTIVE
    if BOT_ACTIVE:
        BOT_ACTIVE = False
        await core_engine.cleanup()
        return "–ê–Ω–∞–ª–∏–∑ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    return "–ê–Ω–∞–ª–∏–∑ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

def get_system_status():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã."""
    return {
        "bot_active": BOT_ACTIVE,
        "initialized": core_engine.is_initialized,
        "websocket_running": core_engine.ws_task is not None and not core_engine.ws_task.done()
    }
  
